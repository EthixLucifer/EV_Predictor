# -*- coding: utf-8 -*-
"""EV_Range_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksI99z49130kJqSfM8IaXC0Syp5FUem7
"""

import pandas as pd               # for Importing csv file
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score              # for accuracy Measurement
from sklearn.ensemble import RandomForestRegressor        # for predicting Value
from sklearn.linear_model import LinearRegression

vasant_data = pd.read_csv('.\EV_RangeA1.csv')  # Load the dataset

vasant_data.dropna()

print(vasant_data.isnull().sum())

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
import numpy as np

vasant_data.fillna(vasant_data.mean(), inplace=True)



from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
import numpy as np

# Fill missing values
vasant_data.fillna(vasant_data.mean(), inplace=True)

selected_columns = ['No_of_wheels', 'Battery_Capacity', 'Vehicle_mass_kg', 'Driver_mass_kg', 'C_rr', 'Grade', 'area',
                    'air_density', 'radius_of_wheel', 'Gear_ratio', 'transmission_efficiency',
                    'motor_efficiency', 'Gross_vehivle_mass', 'g', 'motor_controller_efficiency',
                    'coefficient_of_drag', 'Distance_travel', 'Battery_Capacity_available']

vasant_data = vasant_data[selected_columns]

X = vasant_data.drop(['Battery_Capacity_available'], axis=1)
y = vasant_data['Battery_Capacity_available']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
random_model = RandomForestRegressor(n_estimators=100, random_state=42)
random_model.fit(X_train, y_train)

# Evaluate the model on training data
y_train_pred = random_model.predict(X_train)
mae_train = mean_absolute_error(y_train, y_train_pred)
print(f'Mean Absolute Error on training data: {mae_train}')

# Take user input for prediction
input_values = []
for column in X.columns:
    value = float(input(f"Enter {column}: "))
    input_values.append(value)

user_input = np.array([input_values])

# Predict the battery capacity
prediction = random_model.predict(user_input)

# Print the rounded prediction
print(f"The predicted Battery Capacity available is: {prediction.round(2)}")

import pickle